// Especifica la versi√≥n de la sintaxis de Protocol Buffers.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: msg.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LesterService_MichaelOffer_FullMethodName          = "/LesterService/MichaelOffer"
	LesterService_IniciarNotificaciones_FullMethodName = "/LesterService/IniciarNotificaciones"
	LesterService_DetenerNotificaciones_FullMethodName = "/LesterService/DetenerNotificaciones"
)

// LesterServiceClient is the client API for LesterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// El servicio define un conjunto de funciones remotas.
type LesterServiceClient interface {
	MichaelOffer(ctx context.Context, in *MichaelRequest, opts ...grpc.CallOption) (*MichaelResponse, error)
	IniciarNotificaciones(ctx context.Context, in *NotificacionRequest, opts ...grpc.CallOption) (*NotificacionResponse, error)
	DetenerNotificaciones(ctx context.Context, in *DetenerRequest, opts ...grpc.CallOption) (*DetenerResponse, error)
}

type lesterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLesterServiceClient(cc grpc.ClientConnInterface) LesterServiceClient {
	return &lesterServiceClient{cc}
}

func (c *lesterServiceClient) MichaelOffer(ctx context.Context, in *MichaelRequest, opts ...grpc.CallOption) (*MichaelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MichaelResponse)
	err := c.cc.Invoke(ctx, LesterService_MichaelOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesterServiceClient) IniciarNotificaciones(ctx context.Context, in *NotificacionRequest, opts ...grpc.CallOption) (*NotificacionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificacionResponse)
	err := c.cc.Invoke(ctx, LesterService_IniciarNotificaciones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesterServiceClient) DetenerNotificaciones(ctx context.Context, in *DetenerRequest, opts ...grpc.CallOption) (*DetenerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetenerResponse)
	err := c.cc.Invoke(ctx, LesterService_DetenerNotificaciones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LesterServiceServer is the server API for LesterService service.
// All implementations must embed UnimplementedLesterServiceServer
// for forward compatibility.
//
// El servicio define un conjunto de funciones remotas.
type LesterServiceServer interface {
	MichaelOffer(context.Context, *MichaelRequest) (*MichaelResponse, error)
	IniciarNotificaciones(context.Context, *NotificacionRequest) (*NotificacionResponse, error)
	DetenerNotificaciones(context.Context, *DetenerRequest) (*DetenerResponse, error)
	mustEmbedUnimplementedLesterServiceServer()
}

// UnimplementedLesterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLesterServiceServer struct{}

func (UnimplementedLesterServiceServer) MichaelOffer(context.Context, *MichaelRequest) (*MichaelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MichaelOffer not implemented")
}
func (UnimplementedLesterServiceServer) IniciarNotificaciones(context.Context, *NotificacionRequest) (*NotificacionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IniciarNotificaciones not implemented")
}
func (UnimplementedLesterServiceServer) DetenerNotificaciones(context.Context, *DetenerRequest) (*DetenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetenerNotificaciones not implemented")
}
func (UnimplementedLesterServiceServer) mustEmbedUnimplementedLesterServiceServer() {}
func (UnimplementedLesterServiceServer) testEmbeddedByValue()                       {}

// UnsafeLesterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LesterServiceServer will
// result in compilation errors.
type UnsafeLesterServiceServer interface {
	mustEmbedUnimplementedLesterServiceServer()
}

func RegisterLesterServiceServer(s grpc.ServiceRegistrar, srv LesterServiceServer) {
	// If the following call pancis, it indicates UnimplementedLesterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LesterService_ServiceDesc, srv)
}

func _LesterService_MichaelOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MichaelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).MichaelOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_MichaelOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).MichaelOffer(ctx, req.(*MichaelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesterService_IniciarNotificaciones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificacionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).IniciarNotificaciones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_IniciarNotificaciones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).IniciarNotificaciones(ctx, req.(*NotificacionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesterService_DetenerNotificaciones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).DetenerNotificaciones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_DetenerNotificaciones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).DetenerNotificaciones(ctx, req.(*DetenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LesterService_ServiceDesc is the grpc.ServiceDesc for LesterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LesterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LesterService",
	HandlerType: (*LesterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MichaelOffer",
			Handler:    _LesterService_MichaelOffer_Handler,
		},
		{
			MethodName: "IniciarNotificaciones",
			Handler:    _LesterService_IniciarNotificaciones_Handler,
		},
		{
			MethodName: "DetenerNotificaciones",
			Handler:    _LesterService_DetenerNotificaciones_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}

const (
	TrevorService_Distraccion_FullMethodName        = "/TrevorService/Distraccion"
	TrevorService_IniciarGolpe_FullMethodName       = "/TrevorService/IniciarGolpe"
	TrevorService_ConsultarEstrellas_FullMethodName = "/TrevorService/ConsultarEstrellas"
	TrevorService_ObtenerBotin_FullMethodName       = "/TrevorService/ObtenerBotin"
)

// TrevorServiceClient is the client API for TrevorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrevorServiceClient interface {
	Distraccion(ctx context.Context, in *TrevorRequest, opts ...grpc.CallOption) (*TrevorResponse, error)
	IniciarGolpe(ctx context.Context, in *GolpeRequest, opts ...grpc.CallOption) (*GolpeResponse, error)
	ConsultarEstrellas(ctx context.Context, in *EstrellasRequest, opts ...grpc.CallOption) (*EstrellasResponse, error)
	ObtenerBotin(ctx context.Context, in *BotinRequest, opts ...grpc.CallOption) (*BotinResponse, error)
}

type trevorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrevorServiceClient(cc grpc.ClientConnInterface) TrevorServiceClient {
	return &trevorServiceClient{cc}
}

func (c *trevorServiceClient) Distraccion(ctx context.Context, in *TrevorRequest, opts ...grpc.CallOption) (*TrevorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrevorResponse)
	err := c.cc.Invoke(ctx, TrevorService_Distraccion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trevorServiceClient) IniciarGolpe(ctx context.Context, in *GolpeRequest, opts ...grpc.CallOption) (*GolpeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GolpeResponse)
	err := c.cc.Invoke(ctx, TrevorService_IniciarGolpe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trevorServiceClient) ConsultarEstrellas(ctx context.Context, in *EstrellasRequest, opts ...grpc.CallOption) (*EstrellasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstrellasResponse)
	err := c.cc.Invoke(ctx, TrevorService_ConsultarEstrellas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trevorServiceClient) ObtenerBotin(ctx context.Context, in *BotinRequest, opts ...grpc.CallOption) (*BotinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BotinResponse)
	err := c.cc.Invoke(ctx, TrevorService_ObtenerBotin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrevorServiceServer is the server API for TrevorService service.
// All implementations must embed UnimplementedTrevorServiceServer
// for forward compatibility.
type TrevorServiceServer interface {
	Distraccion(context.Context, *TrevorRequest) (*TrevorResponse, error)
	IniciarGolpe(context.Context, *GolpeRequest) (*GolpeResponse, error)
	ConsultarEstrellas(context.Context, *EstrellasRequest) (*EstrellasResponse, error)
	ObtenerBotin(context.Context, *BotinRequest) (*BotinResponse, error)
	mustEmbedUnimplementedTrevorServiceServer()
}

// UnimplementedTrevorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrevorServiceServer struct{}

func (UnimplementedTrevorServiceServer) Distraccion(context.Context, *TrevorRequest) (*TrevorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Distraccion not implemented")
}
func (UnimplementedTrevorServiceServer) IniciarGolpe(context.Context, *GolpeRequest) (*GolpeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IniciarGolpe not implemented")
}
func (UnimplementedTrevorServiceServer) ConsultarEstrellas(context.Context, *EstrellasRequest) (*EstrellasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarEstrellas not implemented")
}
func (UnimplementedTrevorServiceServer) ObtenerBotin(context.Context, *BotinRequest) (*BotinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerBotin not implemented")
}
func (UnimplementedTrevorServiceServer) mustEmbedUnimplementedTrevorServiceServer() {}
func (UnimplementedTrevorServiceServer) testEmbeddedByValue()                       {}

// UnsafeTrevorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrevorServiceServer will
// result in compilation errors.
type UnsafeTrevorServiceServer interface {
	mustEmbedUnimplementedTrevorServiceServer()
}

func RegisterTrevorServiceServer(s grpc.ServiceRegistrar, srv TrevorServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrevorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrevorService_ServiceDesc, srv)
}

func _TrevorService_Distraccion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrevorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrevorServiceServer).Distraccion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrevorService_Distraccion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrevorServiceServer).Distraccion(ctx, req.(*TrevorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrevorService_IniciarGolpe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GolpeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrevorServiceServer).IniciarGolpe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrevorService_IniciarGolpe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrevorServiceServer).IniciarGolpe(ctx, req.(*GolpeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrevorService_ConsultarEstrellas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstrellasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrevorServiceServer).ConsultarEstrellas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrevorService_ConsultarEstrellas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrevorServiceServer).ConsultarEstrellas(ctx, req.(*EstrellasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrevorService_ObtenerBotin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrevorServiceServer).ObtenerBotin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrevorService_ObtenerBotin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrevorServiceServer).ObtenerBotin(ctx, req.(*BotinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrevorService_ServiceDesc is the grpc.ServiceDesc for TrevorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrevorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TrevorService",
	HandlerType: (*TrevorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Distraccion",
			Handler:    _TrevorService_Distraccion_Handler,
		},
		{
			MethodName: "IniciarGolpe",
			Handler:    _TrevorService_IniciarGolpe_Handler,
		},
		{
			MethodName: "ConsultarEstrellas",
			Handler:    _TrevorService_ConsultarEstrellas_Handler,
		},
		{
			MethodName: "ObtenerBotin",
			Handler:    _TrevorService_ObtenerBotin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}

const (
	FranklinService_Distraccion_FullMethodName        = "/FranklinService/Distraccion"
	FranklinService_IniciarGolpe_FullMethodName       = "/FranklinService/IniciarGolpe"
	FranklinService_ConsultarEstrellas_FullMethodName = "/FranklinService/ConsultarEstrellas"
	FranklinService_ObtenerBotin_FullMethodName       = "/FranklinService/ObtenerBotin"
)

// FranklinServiceClient is the client API for FranklinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FranklinServiceClient interface {
	Distraccion(ctx context.Context, in *FranklinRequest, opts ...grpc.CallOption) (*FranklinResponse, error)
	IniciarGolpe(ctx context.Context, in *GolpeRequest, opts ...grpc.CallOption) (*GolpeResponse, error)
	ConsultarEstrellas(ctx context.Context, in *EstrellasRequest, opts ...grpc.CallOption) (*EstrellasResponse, error)
	ObtenerBotin(ctx context.Context, in *BotinRequest, opts ...grpc.CallOption) (*BotinResponse, error)
}

type franklinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFranklinServiceClient(cc grpc.ClientConnInterface) FranklinServiceClient {
	return &franklinServiceClient{cc}
}

func (c *franklinServiceClient) Distraccion(ctx context.Context, in *FranklinRequest, opts ...grpc.CallOption) (*FranklinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FranklinResponse)
	err := c.cc.Invoke(ctx, FranklinService_Distraccion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *franklinServiceClient) IniciarGolpe(ctx context.Context, in *GolpeRequest, opts ...grpc.CallOption) (*GolpeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GolpeResponse)
	err := c.cc.Invoke(ctx, FranklinService_IniciarGolpe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *franklinServiceClient) ConsultarEstrellas(ctx context.Context, in *EstrellasRequest, opts ...grpc.CallOption) (*EstrellasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstrellasResponse)
	err := c.cc.Invoke(ctx, FranklinService_ConsultarEstrellas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *franklinServiceClient) ObtenerBotin(ctx context.Context, in *BotinRequest, opts ...grpc.CallOption) (*BotinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BotinResponse)
	err := c.cc.Invoke(ctx, FranklinService_ObtenerBotin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FranklinServiceServer is the server API for FranklinService service.
// All implementations must embed UnimplementedFranklinServiceServer
// for forward compatibility.
type FranklinServiceServer interface {
	Distraccion(context.Context, *FranklinRequest) (*FranklinResponse, error)
	IniciarGolpe(context.Context, *GolpeRequest) (*GolpeResponse, error)
	ConsultarEstrellas(context.Context, *EstrellasRequest) (*EstrellasResponse, error)
	ObtenerBotin(context.Context, *BotinRequest) (*BotinResponse, error)
	mustEmbedUnimplementedFranklinServiceServer()
}

// UnimplementedFranklinServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFranklinServiceServer struct{}

func (UnimplementedFranklinServiceServer) Distraccion(context.Context, *FranklinRequest) (*FranklinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Distraccion not implemented")
}
func (UnimplementedFranklinServiceServer) IniciarGolpe(context.Context, *GolpeRequest) (*GolpeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IniciarGolpe not implemented")
}
func (UnimplementedFranklinServiceServer) ConsultarEstrellas(context.Context, *EstrellasRequest) (*EstrellasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarEstrellas not implemented")
}
func (UnimplementedFranklinServiceServer) ObtenerBotin(context.Context, *BotinRequest) (*BotinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerBotin not implemented")
}
func (UnimplementedFranklinServiceServer) mustEmbedUnimplementedFranklinServiceServer() {}
func (UnimplementedFranklinServiceServer) testEmbeddedByValue()                         {}

// UnsafeFranklinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FranklinServiceServer will
// result in compilation errors.
type UnsafeFranklinServiceServer interface {
	mustEmbedUnimplementedFranklinServiceServer()
}

func RegisterFranklinServiceServer(s grpc.ServiceRegistrar, srv FranklinServiceServer) {
	// If the following call pancis, it indicates UnimplementedFranklinServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FranklinService_ServiceDesc, srv)
}

func _FranklinService_Distraccion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FranklinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FranklinServiceServer).Distraccion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FranklinService_Distraccion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FranklinServiceServer).Distraccion(ctx, req.(*FranklinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FranklinService_IniciarGolpe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GolpeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FranklinServiceServer).IniciarGolpe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FranklinService_IniciarGolpe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FranklinServiceServer).IniciarGolpe(ctx, req.(*GolpeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FranklinService_ConsultarEstrellas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstrellasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FranklinServiceServer).ConsultarEstrellas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FranklinService_ConsultarEstrellas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FranklinServiceServer).ConsultarEstrellas(ctx, req.(*EstrellasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FranklinService_ObtenerBotin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FranklinServiceServer).ObtenerBotin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FranklinService_ObtenerBotin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FranklinServiceServer).ObtenerBotin(ctx, req.(*BotinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FranklinService_ServiceDesc is the grpc.ServiceDesc for FranklinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FranklinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FranklinService",
	HandlerType: (*FranklinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Distraccion",
			Handler:    _FranklinService_Distraccion_Handler,
		},
		{
			MethodName: "IniciarGolpe",
			Handler:    _FranklinService_IniciarGolpe_Handler,
		},
		{
			MethodName: "ConsultarEstrellas",
			Handler:    _FranklinService_ConsultarEstrellas_Handler,
		},
		{
			MethodName: "ObtenerBotin",
			Handler:    _FranklinService_ObtenerBotin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}
